[["index.html", "Intro to OTTR - Opensource Tools for Training Resources About this Course 0.1 How to contribute 0.2 Basic overview of what the publishing process looks like:", " Intro to OTTR - Opensource Tools for Training Resources December, 2021 About this Course Please take a look at the code of conduct. If you encounter any problems or have ideas for improvements to this template repository or this getting started guide, please file an issue here! Your feedback is very much appreciated. 0.0.1 Recommended background information If you are not familiar with Git and Github, we recommend going through these chapters from our Reproducibility courses for quick orientation: Why GitHub Using GitHub If you aren’t familiar with markdown this is a nice introduction. For information on RMarkdown (a variation of a markdown file that we use here): RStudio has their lessons here. 0.1 How to contribute If you are looking to write your own course go to: “Start a new course” and start setting up your course repository. After creating your new template, issues will be filed automatically. Follow these issues and the links in them to get going. If you want to contribute in ways that are not your writing your own course, you can help us with our courses by: Reviewing existing content Proposing new content Writing new content Fixing errors and bugs 0.2 Basic overview of what the publishing process looks like: "],["getting-started.html", "Chapter 1 Getting started", " Chapter 1 Getting started Creating course content is not always as straightforward as it may seem. Here we provide you with some tips about how to stay focused and write content that is useful for your intended audience. 1.0.1 Consider your motivation First think about why people need your course. What gap in knowledge or expertise will your course help to fill? Think about what is uniquely useful about your course and write this down, as this will help guide you with the additional content creation steps. 1.0.2 Consider your audience Think about who needs your course. Is it relatively homogenous group? Or do you have individuals of different backgrounds or expertise levels that might take your course. If this is the case, make sure that you create learning objectives and content that would cover the interests of both groups. For example, if many beginners might be taking your course be sure to be careful to define jargon and provide basic fundamental information. However, if there are are also more advanced learners that might take your course, consider making some content that will help this group of learners stretch beyond what they already know. 1.0.3 Learning objectives Learning objectives help you to stay focused as you write you course content. These are actionable statements that describe what your students should be able to do after completing a course or chapter. Start each with a verb that is as specific as possible. Consider your audience as you create your learning objectives. Are they appropriate? Are they useful? This website has some great descriptions about how to best write learning objectives, as well as examples of verbs that you can use to start objectives. They point out that there are many levels of learning - with the highest form being the ability to create something new based on what you learn: Levels of learning [source] Although online content often makes higher levels of learning more difficult, it is not necessarily impossible. For example, take a look at this section of a course about creating documentation: https://jhudatascience.org/Documentation_and_Usability/creating-a-smooth-getting-started-section.html This provides learners with the background knowledge to actually create their own “getting started” documentation material. 1.0.4 Consider course and chapter length Often learners prefer smaller chunks of information at a time. Splitting longer chapters into shorter chapters or longer courses into smaller courses can help your learners find the information that they specifically need and keep them from feeling overwhelmed. 1.0.5 Graphics to emphasize and summarise Graphics can be really helpful to emphasize specific information or to summarise the take-home messages of a particular section. We suggest that if possible make such summarising graphics for each section of your course. Here is an example of a graphic to emphasize a particular piece of information: Here is an example of a graphic to summarise a section: 1.0.6 Create quizzes with learning objectives in mind Quizzes are also a great step for assessing if your course is really accomplishing your instruction goals. As you create your quizzes, take a moment to think about the major take-home messages of your course. Use this as an opportunity to emphasize what you want students to know, especially for concepts that are often misunderstood. Use your quiz creation time to reflect on if your material really captures what you want to teach and emphasize. Here is a great example of a quiz question that requires some higher level learning: Quiz question example Students are taught general information about good documentation. This now requires the students to apply this knowledge in a new context to recognize which option is better. Note that this question uses images. This is a feature that is coming soon for the template. 1.0.7 Make courses engaging Consider adding cartoons or other images/graphics that can make your course more relatable and entertaining. This can be really important for keeping learners interested and motivated. Using concrete examples that are relatable can also be very helpful. 1.0.8 Get feedback If possible find people in your target audience demographic to give you feedback. Especially ask them to try the quizzes to see if your content clearly describes what they need to know to be able to successfully pass the quizzes. This is also a great time to catch any typos! Also consider getting feedback from experts about topics that you are less familiar with. We hope that using our template will make it easier to incorporate feedback from others over time to allow courses to be living documents that are simple to adapt. Make sure that you give credit to people that give you feedback! Check out our credits section for more information on how to do this. 1.0.9 Example courses Beyond our template, check out these courses we have made using this template for additional examples of how we approached content creation: 1) Documentation and Usability 2) Leadership for Cancer Informatics Research "],["ottr-tools.html", "Chapter 2 OTTR Tools 2.1 Citations 2.2 For a course that will need changes to Docker image 2.3 Dockerhub related secrets 2.4 Setting up your Coursera course 2.5 Converting your files for upload to Coursera 2.6 Navigating to your course on Coursera 2.7 Add programmed messages 2.8 Grading formula 2.9 Content Schedule 2.10 Module Descriptions 2.11 Landing Page", " Chapter 2 OTTR Tools 2.1 Citations You can generally follow the Bookdown instructions about citations, but you don’t need to add the additional bibliography argument at the top of the Rmds. To add a new reference source, add to the book.bib file, keeping your new entry in alphabetical order. For articles (or anything with a DOI), go to doi2bib.org or ZoteroBib to get a BibTex-formatted reference that you can copy and paste the reference to the book.bib file. You can also use programs like Zotero or Endnote to export a .bib file and either combine with the book.bib or manage your references from there. Other sources can be added using this template: @website{citekey, author = {First Last}, title = {Title}, url = {http://www.someurl.html}, } To reference the citations in your writing follow the bookdown instructions: Items can be cited directly within the documentation using the syntax @key where key is the citation key in the first line of the entry, e.g., @R-base. To put citations in parentheses, use [@key]. To cite multiple entries, separate the keys by semicolons, e.g., [@key-1; @key-2; @key-3]. To suppress the mention of the author, add a minus sign before @, e.g., [-@R-base]. See Chapter 2 of this template course for examples. Particularly for courses that involve running example code, it’s highly recommended that you use a Docker image for development to maintain software version consistency across course developers. If your course doesn’t require any additional packages to run, then you do not need to set up Docker locally but this Docker image: jhudsl/course_template will run and re-render all of your changes as you add them. If you are new to Docker, you may find it helpful to read this introduction to Docker. - You will need to sign up with a Docker account if you don’t have one. - If you haven’t installed Docker desktop (or need to update it), you can do so here. If your Docker desktop is running, you should see a Docker whale in your tool bar. On Macs, this will be on the bar on the top of your screen; in Windows, on the bottom right. A Docker image is similar to a virtual machine - it contains preinstalled software in a preconfigured environment. Docker images can be downloaded from DockerHub, or you can create your own. We have created the course_template image as a starting point; you can download it from jhudsl/course_template on DockerHub using the docker pull command we have below. To pull the docker image associated with this template, you can run this command below in your command line. This may take a while. docker pull jhudsl/course_template This pulls the course_template image from Docker Hub and copies it to your computer. It will be placed in your local collection of Docker images, managed by Docker (not in your pwd). To use the Docker image associated with the course template, first navigate to the the top of this GitHub repository. Now you can start up the Docker container using the command below. This runs your local copy of the course_template image (which you downloaded from DockerHub). The option -v $PWD:/home/rstudio mounts pwd (this repo) and makes it available at /home/rstudio within the container. Replace all of &lt;CHOOSE_PASSWORD&gt; (including the &lt; and &gt;) with a password of your choosing. On a Mac: docker run -it -v $PWD:/home/rstudio -e PASSWORD=&lt;CHOOSE_PASSWORD&gt; -p 8787:8787 jhudsl/course_template On a Windows: docker run -it -v %CD%:/home/rstudio -e PASSWORD=&lt;CHOOSE_PASSWORD&gt; -p 8787:8787 jhudsl/course_template Do not close this window, but you can minimize it. Open up a new command line window and run the command: docker ps, you should see a container is up and running! In a web browser navigate to the following to get to an RStudio that is ran from your Docker container. localhost:8787 To log in, you’ll need to use rstudio as the username and whatever password you put for &lt;CHOOSE_PASSWORD&gt; in the above command. Couple other handy Docker commands: To stop your Docker container, run docker ps to obtain the docker container ID. Then you can use that ID to run docker stop &lt;CONTAINER_ID&gt;. To remove a docker image (which you may need to do from time to time to clear out space), you can run docker image ls to see all your current images. Then you can run either docker image rm &lt;IMAGE_ID&gt;. If you really need to clear out space, you can follow this StackOverflow post on how to remove all images and all containers. For more info on how to use Docker, they have very extensive documentation here. 2.1.1 Starting a new Docker image Should you find that your course needs additional packages beyond what’s included in the template, you should probably start a new Docker image and you’ll need to do two things to get this going: You need to uncomment the Docker image update following these instructions. You’ll need to set up a Dockerhub account and set up Dockerhub secrets following these instructions. To start up a new Docker image for your new course, you can start with the Dockerfile in this repository and add the additional packages you need using the tips in the next section, but you’ll need to change the tag. If you wish to keep the Docker image underneath the Dockerhub jhudsl organization account, you’ll need to be granted access to that organization – contact one of the jhudsl team to have them add you. 2.1.2 Adding packages to the Dockerfile If you find you need a new package to run the code you are adding, you’ll need to add the package to the docker/Dockerfile. Try to keep things in alphabetical order where possible. 2.1.2.1 Template commands for adding packages to the Dockerfile For R packages installed from CRAN, you can add to the running vector list of R packages. To add an R package from Bioconductor, you can follow this kind of format: RUN Rscript -e &quot;options(warn = 2); BiocManager::install( \\ c(&#39;limma&#39;, \\ &#39;newpackagename&#39;) To add an R package from GitHub you can add a line that follows this general format (need a comma and space): RUN Rscript --vanilla install_github.R \\ --packages &quot;jhudsl/didactr, jhudsl/leanbuild, &lt;NEW_PACKAGE&gt;&quot; \\ To add a Python package, you will need to add pip3 to install Python packages using this format: RUN pip3 install \\ &quot;somepackage==0.1.0&quot; 2.1.2.2 Rebuilding the Docker image When you’ve added a package to the Dockerfile, you’ll need to check that it builds successfully before including it in a pull request. First create a GITHUB token file by making a token and copying a pasting it into a plain text file named docker/github_token.txt. Then you’ll need to rebuild the docker image using this command: docker build -f docker/Dockerfile . -t jhudsl/course_template If it fails, often the issue is a missing dependency. Take a look at the error messages and see if you can determine the issue with some Googling. Once it builds successfully, you should file a PR with your Dockerfile changes. Once the changes are accepted and merged, we’ll need to push the updated image to Dockerhub using: docker push jhudsl/&lt;TAG_FOR_COURSE&gt; When you file a pull request, the Dockerfile build will be tested automatically by the GitHub actions. The Github actions that this repository uses needs four Github secrets set up if you are not a part of the jhudsl organization. It’s important that these are set up and named exactly what they are below in order for Github actions to work correctly. See Github Actions section for how you can customize Github actions which can change the necessity of these secrets. Github secrets To set up these repository secrets, on your repository’s main Github page, go to Settings and scroll down to see Secrets on the left side menu bar. For each new secret, click the New repository secret button and set each as follows, clicking Add secret as you fill each in appropriately: Name: GH_PAT: *If you are a part of jhudsl organization you do not need to set these. For value: Create a personal access token following these instructions. Underneath Select scopes, check both repo and workflow. Then copy the PAT and save as the value. 2.2 For a course that will need changes to Docker image If you know for sure that the course you are working on will never require Docker updates – this may be the case if the course doesn’t any interactive code as a part of the material, you can delete the Docker updating chunk or keep it commented out. However, if you will need to make any change to the Docker image specific to the course you are working on, in the file .github/render-bookdown.yml you should uncomment the ###### START OF DOCKER UPDATE CHUNK up to the part that says ###### END OF DOCKER UPDATE CHUNK. This will require you to set up the Github secrets for Docker (see next section). 2.3 Dockerhub related secrets Note these are not required if Docker update Github actions are not turned on. *If you are a part of jhudsl organization you do not need to set these. Name: DOCKERHUB_USERNAME: For value: put your login username for https://hub.docker.com/ Name: DOCKERHUB_TOKEN: For value: put an access token for Dockerhub. You can create this by following these instructions. Once your content has been largely developed you may want to add your course to Coursera. This guide was prepared specifically for those developing courses for the ITN project at Johns Hopkins University or other Coursera partner institutions. It reflects the needs and goals of ITN course developers. Coursera’s Educator Resource Center is the authoritative source of documentation for using the Coursera platform. 2.4 Setting up your Coursera course If you are from Johns Hopkins: You will need to follow this document and send information Ira Gooding who will create a course shell for you. If you are not from Johns Hopkins: You will need to set up your own educator profile and course shell through your institution. 2.5 Converting your files for upload to Coursera The Github actions set up in the render-bookdown.yml also render your course material in a format suitable for linking to Coursera. This Coursera version is identical except that the table of contents bar on the left side has been dropped so as to not confuse Coursera users about navigating the course. These files can be previewed in the docs/coursera/ folder. Click on your chapter htmls to see what it will look like. In the Leanpub repo, Leanpub-formatted quizzes can be converted to a Coursera yaml format. Or alternatively if you do not wish to have a Leanpub version of your course, you can either manually enter your Coursera quizzes or manually write a Coursera yaml file following the format of our Coursera template quiz. 2.6 Navigating to your course on Coursera After your course shell has been added to your account you can navigate to it by going to My Courses: And you should see it listed: You can click on Go to Course. And on your main course page click Edit Course in the right corner. This will bring you to your version page (at this point you should only have a Version 1, so go to that one). Now you are on the Edit content page and ready to add lessons, modules and quizzes! In general, you will want each lesson to contain at least a chapter and a quiz. Each module is supposed to take a learner one week, so depending on the length of your chapters and quizzes you may want one or two lessons/chapters/quizzes a module. To add a new lesson, click the + Add Lesson button: Now you are ready to add a chapter! 2.6.1 Adding new chapters to Coursera You’ll need to link out each chapters in Coursera by providing a url built from your Github pages. You can see a preview of these chapters you will link to in Coursera by going to your Github pages, but adding /coursera at the end of your url before the chapter file name. So the urls for each of your chapters which you will supply to Coursera in the next steps will look like this: &lt;main-github-pages-url&gt;/coursera/&lt;html_filename&gt; If you are unsure what the main url for your Github pages is, in your github repository, go to Settings &gt; Pages and you’ll see Your site is published at: So for example, the introduction chapter of this template would be linked by using this url: https://jhudatascience.org/OTTR_Template/coursera/introduction.html To add this URL to Coursera, add a new lesson, click + More and choose Ungraded Plugin. This will add an unpublished ungraded plugin to your lesson: Now click the edit button on the new Ungraded Plugin. This will bring you to the standard example plug in page. Scroll down and click Edit Configuration: Replace the example url with the url of your individual chapter we discussed above. Then click on Save Configuration: If the url you provided was correct, you should see a preview of your chapter: You may want to edit the title at the top of this page to indicate the material being linked. Now click Publish in the left upper corner (don’t worry it’s not actually publishing publicly, its just saving your changes). And it will ask you again to really scare you, but yes, click Publish. Congrats you added a chapter to your course! Now do the same thing for all your chapters! 2.6.2 Adding new quizzes to Coursera To add a new quiz start from your Edit content page and on whatever lesson you would like to add the quiz to and click the + Quiz button. Now go to Edit on the new quiz. If you are choosing to manually enter your quizzes, you can continue to add each question from this page. If you are importing a Leanpub converted quiz click the Import Questions button and choose your converted yml files. (If you’ve not yet converted your leanpub quizzes, then refer to that section.) Upload your Coursera quiz yml file from your device: After you’ve selected the file click Upload: It will let you know if there are any problems uploading the quiz. If the coursera_quiz_conversion.R script failed to render something properly, please file an issue here describing how it failed and including a file that shows the instance it failed to convert. Note that images and links are not currently supported in that conversion script. You also cannot have : in your prompts or answers. But if the quiz uploads without issue, then click Continue. By default quizzes are set to Practice Quiz but you will need at least some of your quizzes to be used for Grading. On the left side of quiz editing page, there’s a drop down menu to select Graded Quiz. Also in this location you can edit the estimated time it should take to complete the quiz (by default it is set to 15 minutes). You also will want to assign the learning objectives that apply to this quiz. You can do this by clicking on the plus sign underneath the title. From here it will suggest the module’s learning objectives. Click all that apply and then Save. You can edit the title of your quiz and then click Publish (don’t worry it’s not actually publishing publicly, its just saving your changes). And it will ask you again to really scare you, but yes, click Publish. Congrats you added a quiz to your course! 2.7 Add programmed messages You can click on Go to Course. And on your main course page click Edit Course in the right corner. This will bring you to your version page. Underneath Content, on the left side bar, at the bottom, there is the Programmed Messages. At the very least you should add a Welcome to the course and a Completion programmed message. Click on each of these to edit them. Click Preview and then Publish to save your edits. Here are some templated messages to get you started: 2.7.0.1 Welcome template message: Welcome to {Course Name} We hope this course will {What will they learn?} To get the most out of the course {What do you advise?} If you ever encounter any problems with the course, have questions or ideas, please let us know using this feedback form. Add a link to your feedback form by clicking the link icon. Click Preview and then Publish to save your edits. 2.7.0.2 Completion template message: Congratulations and thank you for completing {name of course}! We hope this course has {What do you hope they learned}. If you have feedback about our course we&#39;d greatly appreciate you filling out this form. Add a link to your feedback form by clicking the link icon. Click Preview and then Publish to save your edits. 2.8 Grading formula For final grades in the course, you will need to set the Grading Formula. To get to this page, you can click on Go to Course. And on your main course page click Edit Course in the right corner. This will bring you to your version page. Now you can set the percentage that each module’s assignments are worth in the course. 2.9 Content Schedule You can find the settings for this under the Content tab. Here you can modify how each of your modules should be assigned to each week of your course. 2.10 Module Descriptions Module descriptions can be found right before learning objectives when you are editing content. Adding these helps learners know a bit more about what to expect. 2.11 Landing Page Add an image for your course and consider adding the following to polish your course: * Estimated workload * Skills * Recommended background * Items students will learn Github actions will automatically run a spell check on all Rmds whenever a pull request to the main branch is filed. Depending on your preference, you may find it easier to spell check manually on your local computer before pushing to Github. It will fail if there are more than 3 spelling errors and you’ll need to resolve those before being able to merge your pull request. Click on the GitHub comment that has the download link to spelling errors. This will download a zip file with a TSV. Open up this zip and look at the TSV to see all the spelling errors that need to be resolved. Some of these errors may be things that the spell check doesn’t recognize for example: ITCR or DaSL. If it’s a ‘word’ the spell check should recognize, you’ll need to add this to the dictionary. Go to the resources/dictionary.txt file. Open the file and add the new ‘word’ to its appropriate place (the words are in alphabetical order). Then commit the changes to resources/dictionary.txt to your branch and this should make the spell check status check pass. 2.11.1 Running locally You can run spell check locally by calling the script from the top of the repository (your main git repository directory) in bash: Rscript scripts/spell-check.R 2.11.2 Ignoring URLs If you want to write out a URL without having to add it to the spell check dictionary, you can style the URL as inline code by adding single back ticks, and it will be ignored by spell check: Example: Visit [`example.com`](https://www.example.com) now. Visit example.com now. To allow for easy conversion to Leanpub, we suggest the following: When making a list of points, if you make each major heading a separate line, this can avoid numbering issues. This also works better typically then using a bulleted list unless the list items are short (less than one line). Here you can see how this list in bookdown made a nice list in Leanpub. Here is the Bookdown version: Here is the Leanpub version: Avoid images between numeric list items. For making empty lines use &amp;nbsp; as it is compatible with Leanpub. If you have two courses that the content and topics overlap, you may want to share written material between the two. But, if you copy and paste to share material this would create a maintenance problem because if you update one you will need to remember to copy over the other! 😱 In OTTR, we try to minimize maintenance pains so to get around this, we use cow::borrow_chapter() from the jhudsl/cow package. The cow package is already on the jhudsl/course_template docker image so you do not need to install it if you are using the docker image or if you are have GitHub actions do all the rendering for you. To borrow a chapter from another course, create an .Rmd as you normally would, with a `in a chunk at the beginning of the file and a [H1` title](https://www.markdownguide.org/basic-syntax/). Then, wherever you would like the borrowed chapter to appear, put an R chunk with this: The magic of this function is that whenever the course is re-rendered it will knit the latest version of the chapter you are borrowing. Note that this chunk cannot be run interactively, just include it in your Rmd and render your course as usual. ### Borrowing from a local file If for some reason you would like a local file incorporated, just leave off the repo_name argument and `cow::borrow_chapter()` will look for the chapter locally: 2.11.3 Borrowing from a private repository If you are borrowing from a course in a private repository, you will need to supply GitHub personal access token using a git_pat argument like this: ### Removing an h1 header If you want to change the title you can use an option `remove_h1` to remove the title from the incoming borrowed chapter. Some new words after the borrowed chapter content. "],["platform-specific-set-up.html", "Chapter 3 Platform specific set up 3.1 Setting up your Coursera course 3.2 Converting your files for upload to Coursera 3.3 Navigating to your course on Coursera 3.4 Add programmed messages 3.5 Grading formula 3.6 Content Schedule 3.7 Module Descriptions 3.8 Landing Page 3.9 Choosing publishing platforms 3.10 Links to the guides for each platform: 3.11 How to use these repositories: 3.12 Setting up your Leanpub Github repository 3.13 Linking to your OTTR_Template course Github repository 3.14 Setting up quizzes 3.15 Leanpub rendering 3.16 Hosting your course on Leanpub 3.17 Converting quizzes from Leanpub to Coursera format 3.18 Setting up the _Quizzes repository checklist: 3.19 Linking the OTTR_Template course repository to the _Quizzes repository 3.20 Setting up your Coursera course 3.21 Converting your files for upload to Coursera 3.22 Navigating to your course on Coursera 3.23 Add programmed messages 3.24 Grading formula 3.25 Content Schedule 3.26 Module Descriptions 3.27 Landing Page", " Chapter 3 Platform specific set up Once your content has been largely developed you may want to add your course to Coursera. This guide was prepared specifically for those developing courses for the ITN project at Johns Hopkins University or other Coursera partner institutions. It reflects the needs and goals of ITN course developers. Coursera’s Educator Resource Center is the authoritative source of documentation for using the Coursera platform. 3.1 Setting up your Coursera course If you are from Johns Hopkins: You will need to follow this document and send information Ira Gooding who will create a course shell for you. If you are not from Johns Hopkins: You will need to set up your own educator profile and course shell through your institution. 3.2 Converting your files for upload to Coursera The Github actions set up in the render-bookdown.yml also render your course material in a format suitable for linking to Coursera. This Coursera version is identical except that the table of contents bar on the left side has been dropped so as to not confuse Coursera users about navigating the course. These files can be previewed in the docs/coursera/ folder. Click on your chapter htmls to see what it will look like. In the Leanpub repo, Leanpub-formatted quizzes can be converted to a Coursera yaml format. Or alternatively if you do not wish to have a Leanpub version of your course, you can either manually enter your Coursera quizzes or manually write a Coursera yaml file following the format of our Coursera template quiz. 3.3 Navigating to your course on Coursera After your course shell has been added to your account you can navigate to it by going to My Courses: And you should see it listed: You can click on Go to Course. And on your main course page click Edit Course in the right corner. This will bring you to your version page (at this point you should only have a Version 1, so go to that one). Now you are on the Edit content page and ready to add lessons, modules and quizzes! In general, you will want each lesson to contain at least a chapter and a quiz. Each module is supposed to take a learner one week, so depending on the length of your chapters and quizzes you may want one or two lessons/chapters/quizzes a module. To add a new lesson, click the + Add Lesson button: Now you are ready to add a chapter! 3.3.1 Adding new chapters to Coursera You’ll need to link out each chapters in Coursera by providing a url built from your Github pages. You can see a preview of these chapters you will link to in Coursera by going to your Github pages, but adding /coursera at the end of your url before the chapter file name. So the urls for each of your chapters which you will supply to Coursera in the next steps will look like this: &lt;main-github-pages-url&gt;/coursera/&lt;html_filename&gt; If you are unsure what the main url for your Github pages is, in your github repository, go to Settings &gt; Pages and you’ll see Your site is published at: So for example, the introduction chapter of this template would be linked by using this url: https://jhudatascience.org/OTTR_Template/coursera/introduction.html To add this URL to Coursera, add a new lesson, click + More and choose Ungraded Plugin. This will add an unpublished ungraded plugin to your lesson: Now click the edit button on the new Ungraded Plugin. This will bring you to the standard example plug in page. Scroll down and click Edit Configuration: Replace the example url with the url of your individual chapter we discussed above. Then click on Save Configuration: If the url you provided was correct, you should see a preview of your chapter: You may want to edit the title at the top of this page to indicate the material being linked. Now click Publish in the left upper corner (don’t worry it’s not actually publishing publicly, its just saving your changes). And it will ask you again to really scare you, but yes, click Publish. Congrats you added a chapter to your course! Now do the same thing for all your chapters! 3.3.2 Adding new quizzes to Coursera To add a new quiz start from your Edit content page and on whatever lesson you would like to add the quiz to and click the + Quiz button. Now go to Edit on the new quiz. If you are choosing to manually enter your quizzes, you can continue to add each question from this page. If you are importing a Leanpub converted quiz click the Import Questions button and choose your converted yml files. (If you’ve not yet converted your leanpub quizzes, then refer to that section.) Upload your Coursera quiz yml file from your device: After you’ve selected the file click Upload: It will let you know if there are any problems uploading the quiz. If the coursera_quiz_conversion.R script failed to render something properly, please file an issue here describing how it failed and including a file that shows the instance it failed to convert. Note that images and links are not currently supported in that conversion script. You also cannot have : in your prompts or answers. But if the quiz uploads without issue, then click Continue. By default quizzes are set to Practice Quiz but you will need at least some of your quizzes to be used for Grading. On the left side of quiz editing page, there’s a drop down menu to select Graded Quiz. Also in this location you can edit the estimated time it should take to complete the quiz (by default it is set to 15 minutes). You also will want to assign the learning objectives that apply to this quiz. You can do this by clicking on the plus sign underneath the title. From here it will suggest the module’s learning objectives. Click all that apply and then Save. You can edit the title of your quiz and then click Publish (don’t worry it’s not actually publishing publicly, its just saving your changes). And it will ask you again to really scare you, but yes, click Publish. Congrats you added a quiz to your course! 3.4 Add programmed messages You can click on Go to Course. And on your main course page click Edit Course in the right corner. This will bring you to your version page. Underneath Content, on the left side bar, at the bottom, there is the Programmed Messages. At the very least you should add a Welcome to the course and a Completion programmed message. Click on each of these to edit them. Click Preview and then Publish to save your edits. Here are some templated messages to get you started: 3.4.0.1 Welcome template message: Welcome to {Course Name} We hope this course will {What will they learn?} To get the most out of the course {What do you advise?} If you ever encounter any problems with the course, have questions or ideas, please let us know using this feedback form. Add a link to your feedback form by clicking the link icon. Click Preview and then Publish to save your edits. 3.4.0.2 Completion template message: Congratulations and thank you for completing {name of course}! We hope this course has {What do you hope they learned}. If you have feedback about our course we&#39;d greatly appreciate you filling out this form. Add a link to your feedback form by clicking the link icon. Click Preview and then Publish to save your edits. 3.5 Grading formula For final grades in the course, you will need to set the Grading Formula. To get to this page, you can click on Go to Course. And on your main course page click Edit Course in the right corner. This will bring you to your version page. Now you can set the percentage that each module’s assignments are worth in the course. 3.6 Content Schedule You can find the settings for this under the Content tab. Here you can modify how each of your modules should be assigned to each week of your course. 3.7 Module Descriptions Module descriptions can be found right before learning objectives when you are editing content. Adding these helps learners know a bit more about what to expect. 3.8 Landing Page Add an image for your course and consider adding the following to polish your course: * Estimated workload * Skills * Recommended background * Items students will learn 3.9 Choosing publishing platforms This template helps you prepare material to publish, but there are certain steps that cannot be automated. In those instances we’ve provided step-by-step guides to get you started on getting your material published on the platforms. Depending on your goals and intended audience you may want to publish just one or all three of the platforms supported: 3.10 Links to the guides for each platform: Publishing with Bookdown Publishing with Leanpub Publishing with Coursera Bookdown is published using Github pages which you can set up following the set up repository instructions. As you modify the names of the chapters of your course and add more chapters (using the .Rmd files), you need to update the _bookdown.yml file accordingly. For example let’s say that we added another chapter and named the file 03-new_chapter_of_course.Rmd. We would update our _bookdown.yml to look like this: book_filename: &quot;Course_Name&quot; chapter_name: &quot;Chapter &quot; repo: https://github.com/jhudsl/OTTR_Template/ ##Make sure you update this for your GitHub Repo!! rmd_files: [&quot;index.Rmd&quot;, &quot;01-intro.Rmd&quot;, &quot;02-chapter_of_course.Rmd&quot;, &quot;03-new_chapter_of_course.Rmd&quot;, ##Only this is new! &quot;about.Rmd&quot;] new_session: yes delete_merged_file: true language: ui: chapter_name: &quot;Chapter &quot; output_dir: &quot;docs&quot; Notice how only one line is different - the one that says 03-chapter_of_course.Rmd\", Be careful about quotation marks: \"\" as well as commas: ,! Once we do this we can preview the book! You can do so by typing: bookdown::serve_book() in the RStudio Console. Note that when you run bookdown it will create an .rds file; you can generally ignore this file. You will then see a live version of your book in your RStudio viewer. Note that When a pull request is merged to main, bookdown::render_book() will be re-run by the GitHub actions and the results added to main. The _Quizzes template repository includes all of the files that you need to convert your Bookdown course that was set up from a OTTR_Template to a Leanpub course with quizzes. These repositories are separate so that the quizzes and answers can be kept private. If you haven’t created a OTTR_Template course repository for your course template repository’s getting started section Wiki and start there. If you encounter any problems or have ideas for improvements to this template repository or this getting started Wiki, please file an issue here! Your feedback is very much appreciated. 3.11 How to use these repositories: If you don’t wish to have quizzes with your material or publish on Leanpub then you do not need the _Quizzes repository template, and the OTTR_Template course repository should be sufficient for your needs. The Leanpub repository is where quizzes are stored because it is meant to be kept private so answers are hidden. Keep in mind that in order to keep your Leanpub and Bookdown versions of your course concurrent, you should not make chapter edits in this repository! Only quiz edits should be in your _Quizzes repository. Chapter changes should be made in your OTTR_Template course repository and the transfer-rendered_files.yml Github action should be used to copy over the changes here. 3.12 Setting up your Leanpub Github repository In the upper right of this screen, click Use this template and follow the steps to set up your course’s GitHub repository. Name your repository fill in a short description. Make sure to set your new repository to Private so your quiz answers will be hidden. 3.12.0.0.1 Set up branches *These settings are the same as we used in the Bookdown repository so we will need to set them up in the same way. Go to Settings &gt; Branches and click Add rule. For Branch name pattern, put main. Protect the main branch: Then check the box that says Require pull request reviews before merging. Make sure branches are updated: - Check the box that says Require status checks to pass before merging. - Underneath this also check the box that says Require branches to be up to date before merging. Use automatic spell and URL checks: After the first pull request, a couple of checks will automatically happen and then appear here in settings. Then, you can require these checks to pass before merging pull requests by returning here and selecting them - they are url_check and sp-check they will check that the urls work and that the quizzes do not have spelling errors. See the Github Actions section in the Bookdown repository for more details on these. After setting up these new branch items, click Create and Save changes. 3.13 Linking to your OTTR_Template course Github repository In order to link your _Quizzes and OTTR_Template course repositories (so you only have to edit material in one place), you need to name your GitHub repository with an identical name to your OTTR_Template course repository except end it in _Quizzes. So for example, if your Bookdown repository is called: Cool_Course or Cool_CourseOTTR_Template course; it’s Leanpub repository must be called Cool_Course_Quizzes. The GitHub actions that are responsible for content transfer is in the .gihub/workflows/ folder and called transfer-rendered-files.yml Note if you haven’t set a GH_PAT git secret and you are not a part of jhudsl organization, you will need to set that by following these instructions. _Note that any content changes to non-quiz material needs to be done your course’s Bookdown repository! Do NOT change them in your Quizzes repository, otherwise your OTTR_Template course course will not be updated. 3.14 Setting up quizzes See and copy this template quiz to get started. All quizzes need to be written in the Markua format. Refer to their documentation (but note that it is sometimes vague or out of date). The example question types in the template are ones that are verified to work. After you add each new quiz to the quizzes/ directory, it’s filename needs to be added in its respective spot in the Book.txt file; this ensures its incorporated by Leanpub in the correct order. You need to modify the Book.txt file in the manuscript directory to include the .md files that you wish in the order that you would like. We have also included a quiz example. If you wanted two quizzes (one called quiz_1.md and one called quiz_2.md) you could duplicate and modify quiz_1.md for your needs and then you could make the Book.txt file look like this (assuming you created a chapter called \"03-chapter_of_course.Rmd\" and you wanted quiz_1 to be after 02-chapter-of_course and quiz_2 to be after 03_chapter_of_course: 01-intro.md 02-chapter_of_course.md quiz_1.md 03-chapter_of_course.md quiz_2.md about.md Note that any .md files with an # in front of the name in the Book.txt file will be ignored by Leanpub. We have included an example of this in the Book.txt file. 3.15 Leanpub rendering For convenience purposes the leanbuild package can do most of the formatting of links and etc for you (so long as you followed the formatting prescribed by the Setting up images section of this Wiki. Github actions in this repository will attempt to do the Bookdown to Leanpub conversions for you by running leanbuild::bookdown_to_Quizzes() function at the top of the repository. You can also run this command manually if you wish. If you encounter issues with the leanbuild package, please file an issue on its Github repository. 3.16 Hosting your course on Leanpub To host your course on Leanpub follow these steps: Make a Leanpub account here: https://leanpub.com/ if you don’t already have one. Start a course Click on the 3 line menu button Click the author tab on the far left Click Courses Click the text that says create a new course Fill out all the necessary information Select using Git and GitHub (if you work with us at JHU there is a different protocol and additional settings you need to set which you should follow - see this document ) press the add to plan button Preview a new version Click on the 3 line menu button Click the author tab on the far left Click Courses Click on your course name/icon Click “Preview New Version” Click Create Preview button If you have errors in your course (typically from a quiz formatting issue) the render will fail and you will need to fix your quizzes. Also note, that occasionally the preview might fail and you should just try again, as it will work the second time. This might be due to a lag in GitHub and Leanpub communicating. Once you are ready and you like your course, you can click the “Publish New Version” instead of “Preview New Version”. 3.17 Converting quizzes from Leanpub to Coursera format See more instructions on how to port a course made from these templates to Coursera. You can convert your quizzes to a nicely upload-able yaml file in this repository by running this command in the docker image leanbuild::convert_quizzes() Note that currently images and links are not supported and if your quizzes contain those, you will have to manually add them at this time. You can run this same command locally if you wish to test something. This render the chapters without the table of Contents. If you do not wish to publish to Coursera and prefer this do not run, you may delete this section (but it shouldn’t hurt anything to keep as is – unless for some reason it causes you some troubles). Additionally, the leanbuild package has a leanbuild::convert_quizzes() function if you choose to create quizzes and publish on both Leanpub and Coursera. 3.18 Setting up the _Quizzes repository checklist: Repository is created and set to private. main branch has been set up: Require pull request reviews before merging box is checked. Require status checks to pass before merging box is checked. Underneath that Require branches to be up to date before merging box is checked. This course’s Leanpub has been set up This repo has been enrolled in automatic updates from the original template. 3.19 Linking the OTTR_Template course repository to the _Quizzes repository transfer-rendered-files.yml is a Github action that will copy over the output docs/ files rendered by Bookdown to a parallel Leanpub repository and it lives in the OTTR_Template course repository. Once build-all is run, the docs/ folder where the rendered files are place are copied over to the Leanpub repository and filed as a pull request. Once your content has been largely developed you may want to add your course to Coursera. This guide was prepared specifically for those developing courses for the ITN project at Johns Hopkins University or other Coursera partner institutions. It reflects the needs and goals of ITN course developers. Coursera’s Educator Resource Center is the authoritative source of documentation for using the Coursera platform. 3.20 Setting up your Coursera course If you are from Johns Hopkins: You will need to follow this document and send information Ira Gooding who will create a course shell for you. If you are not from Johns Hopkins: You will need to set up your own educator profile and course shell through your institution. 3.21 Converting your files for upload to Coursera The Github actions set up in the render-bookdown.yml also render your course material in a format suitable for linking to Coursera. This Coursera version is identical except that the table of contents bar on the left side has been dropped so as to not confuse Coursera users about navigating the course. These files can be previewed in the docs/coursera/ folder. Click on your chapter htmls to see what it will look like. In the Leanpub repo, Leanpub-formatted quizzes can be converted to a Coursera yaml format. Or alternatively if you do not wish to have a Leanpub version of your course, you can either manually enter your Coursera quizzes or manually write a Coursera yaml file following the format of our Coursera template quiz. 3.22 Navigating to your course on Coursera After your course shell has been added to your account you can navigate to it by going to My Courses: And you should see it listed: You can click on Go to Course. And on your main course page click Edit Course in the right corner. This will bring you to your version page (at this point you should only have a Version 1, so go to that one). Now you are on the Edit content page and ready to add lessons, modules and quizzes! In general, you will want each lesson to contain at least a chapter and a quiz. Each module is supposed to take a learner one week, so depending on the length of your chapters and quizzes you may want one or two lessons/chapters/quizzes a module. To add a new lesson, click the + Add Lesson button: Now you are ready to add a chapter! 3.22.1 Adding new chapters to Coursera You’ll need to link out each chapters in Coursera by providing a url built from your Github pages. You can see a preview of these chapters you will link to in Coursera by going to your Github pages, but adding /coursera at the end of your url before the chapter file name. So the urls for each of your chapters which you will supply to Coursera in the next steps will look like this: &lt;main-github-pages-url&gt;/coursera/&lt;html_filename&gt; If you are unsure what the main url for your Github pages is, in your github repository, go to Settings &gt; Pages and you’ll see Your site is published at: So for example, the introduction chapter of this template would be linked by using this url: https://jhudatascience.org/OTTR_Template/coursera/introduction.html To add this URL to Coursera, add a new lesson, click + More and choose Ungraded Plugin. This will add an unpublished ungraded plugin to your lesson: Now click the edit button on the new Ungraded Plugin. This will bring you to the standard example plug in page. Scroll down and click Edit Configuration: Replace the example url with the url of your individual chapter we discussed above. Then click on Save Configuration: If the url you provided was correct, you should see a preview of your chapter: You may want to edit the title at the top of this page to indicate the material being linked. Now click Publish in the left upper corner (don’t worry it’s not actually publishing publicly, its just saving your changes). And it will ask you again to really scare you, but yes, click Publish. Congrats you added a chapter to your course! Now do the same thing for all your chapters! 3.22.2 Adding new quizzes to Coursera To add a new quiz start from your Edit content page and on whatever lesson you would like to add the quiz to and click the + Quiz button. Now go to Edit on the new quiz. If you are choosing to manually enter your quizzes, you can continue to add each question from this page. If you are importing a Leanpub converted quiz click the Import Questions button and choose your converted yml files. (If you’ve not yet converted your leanpub quizzes, then refer to that section.) Upload your Coursera quiz yml file from your device: After you’ve selected the file click Upload: It will let you know if there are any problems uploading the quiz. If the coursera_quiz_conversion.R script failed to render something properly, please file an issue here describing how it failed and including a file that shows the instance it failed to convert. Note that images and links are not currently supported in that conversion script. You also cannot have : in your prompts or answers. But if the quiz uploads without issue, then click Continue. By default quizzes are set to Practice Quiz but you will need at least some of your quizzes to be used for Grading. On the left side of quiz editing page, there’s a drop down menu to select Graded Quiz. Also in this location you can edit the estimated time it should take to complete the quiz (by default it is set to 15 minutes). You also will want to assign the learning objectives that apply to this quiz. You can do this by clicking on the plus sign underneath the title. From here it will suggest the module’s learning objectives. Click all that apply and then Save. You can edit the title of your quiz and then click Publish (don’t worry it’s not actually publishing publicly, its just saving your changes). And it will ask you again to really scare you, but yes, click Publish. Congrats you added a quiz to your course! 3.23 Add programmed messages You can click on Go to Course. And on your main course page click Edit Course in the right corner. This will bring you to your version page. Underneath Content, on the left side bar, at the bottom, there is the Programmed Messages. At the very least you should add a Welcome to the course and a Completion programmed message. Click on each of these to edit them. Click Preview and then Publish to save your edits. Here are some templated messages to get you started: 3.23.0.1 Welcome template message: Welcome to {Course Name} We hope this course will {What will they learn?} To get the most out of the course {What do you advise?} If you ever encounter any problems with the course, have questions or ideas, please let us know using this feedback form. Add a link to your feedback form by clicking the link icon. Click Preview and then Publish to save your edits. 3.23.0.2 Completion template message: Congratulations and thank you for completing {name of course}! We hope this course has {What do you hope they learned}. If you have feedback about our course we&#39;d greatly appreciate you filling out this form. Add a link to your feedback form by clicking the link icon. Click Preview and then Publish to save your edits. 3.24 Grading formula For final grades in the course, you will need to set the Grading Formula. To get to this page, you can click on Go to Course. And on your main course page click Edit Course in the right corner. This will bring you to your version page. Now you can set the percentage that each module’s assignments are worth in the course. 3.25 Content Schedule You can find the settings for this under the Content tab. Here you can modify how each of your modules should be assigned to each week of your course. 3.26 Module Descriptions Module descriptions can be found right before learning objectives when you are editing content. Adding these helps learners know a bit more about what to expect. 3.27 Landing Page Add an image for your course and consider adding the following to polish your course: * Estimated workload * Skills * Recommended background * Items students will learn "],["automation-info-and-set-up.html", "Chapter 4 Automation info and set up", " Chapter 4 Automation info and set up Here’s a summary of the Github actions set up in this repository. Note: if you are not a part of jhudsl organization, you will need to set follow these instructions to set up your GitHub secrets before these actions will work. In summary, here’s what the GitHub actions do for you (when set up): Re-render Bookdown after merging to main Create a preview of the rendered version with changes you’ve made on a pull request Re convert files for Coursera Spell check Fix code styling Checks for broken URLs Copy over Leanpub-needed files to the Leanpub repository Re-render Leanpub files (on the other repository) Checks if Docker image changes successfully build Push changed Docker images to Dockerhub Here’s a diagram to summarize: These Github actions also work across repositories to support converting Bookdown content into formats ready for publishing on Coursera or Leanpub. If you are only looking to use this template for creating a Bookdown course, this diagram is not as pertinent. Summary of publishing process 4.0.1 Preview of render After you open a pull request, a preview of the renders as they will appear after the pull request is accepted is run and linked to in a comment on the pull request. Upon each commit these previews will re-render and edit the comment with the time of the latest render. These Github Actions are located in render-preview.yml. These previews do NOT incorporate any changes influenced by any changes to the Docker image if the Dockerfile is also updated in the same pull request. 4.0.2 Spell check Github actions will automatically run a spell check on all Rmds whenever a pull request to the main branch is filed. Depending on your preference, you may find it easier to spell check manually on your local computer before pushing to Github. It will fail if there are more than 2 spelling errors and you’ll need to resolve those before being able to merge your pull request. To resolve those spelling errors, go to this repository’s Actions tab. Then, click on the GitHub action from the PR you just submitted. Scroll all the way down to Artifacts and click spell-check-results. This will download a zip file with a TSV that lists all the spelling errors. Some of these errors may be things that the spell check doesn’t recognize for example: ITCR or DaSL. If it’s a ‘word’ the spell check should recognize, you’ll need to add this to the dictionary. Go to the resources/dictionary.txt file. Open the file and add the new ‘word’ to its appropriate place (the words are in alphabetical order). Then commit the changes to resources/dictionary.txt to your branch and this should make the spell check status check pass. 4.0.3 Code styling Github actions will run the styler package to all style R in all Rmds whenever a pull request to the main branch is filed. Style changes will automatically be committed back to your branch. 4.0.4 URL Checking GitHub actions runs a check on all the URLs upon creating a pull request to the main branch. If it fails, you’ll need to go the Actions tab of this repository, then find the GitHub check_urls job for the last commit you just pushed. Click on check_urls and the specific step of Check URLs to see a print out of the URLs tested. If the URL checker is failing on something that isn’t really a URL or doesn’t need to be checked, open up the GitHub actions file: .github/workflows/url-checker.yml and add the imposter URL on to the exclude-urls: argument with a comma in between. 4.0.5 Customizing render-bookdown.yml If you plan on doing a lot of customizing with GitHub actions or would like to become more familiar, we recommend reading this article to get your feet wet. Then this reference guide in the GitHub actions docs is super useful. Note that build-all and docker-build-test are not something we recommend requiring for status checks because docker-build-test is only run if there are changes to the Dockerfile and build-all is only run upon the acceptance and merging of a pull request. However for simplicity purposes there are two sections this Github action that can you keep off if you won’t be making changes to the Docker image or you won’t be wanting it to sync to Google Slides automatically. 4.0.6 For a course that needs to publish to the Leanpub repository transfer-rendered-files.yml is a Github action that will copy over the output docs/ files rendered by Bookdown to a parallel Leanpub repository. Once build-all is run, the docs/ folder where the rendered files are place are copied over to the Leanpub repository and filed as a pull request. There are two edits to .github/workflow/transfer-rendered-files.yml that need to be done to turn on the automatic copying of files between these repos: Change line 28 to the repository name you would like the docs/ files to be transferred to. repository: jhudsl/Course_Template_Quizzes Uncomment lines 13-18 in this file: # Only run after the render finishes running #workflow_run: # workflows: [ &quot;Build, Render, and Push&quot; ] # branches: [ main ] # types: # - completed 4.0.7 For a course that needs to publish to Coursera The render-bookdown.yml github action the chapter content for Coursera by using this command within the docker image: leanbuild::render_coursera() You can run this same command locally if you wish to test something. This render the chapters without the table of Contents. If you do not wish to publish to Coursera and prefer this do not run, you may delete this section (but it shouldn’t hurt anything to keep as is – unless for some reason it causes you some troubles). Additionally, the Leanpub companion repository has a Leanpub -&gt; Coursera quiz conversion script if you choose to create quizzes and publish on both Leanpub and Coursera. This original course template: https://github.com/jhudsl/OTTR_Template is always a work in progress. We are working on adding more features and smoothing out bugs as we go (this is also why your feedback is greatly appreciated). When updates are made to files that aren’t specific to the course content but instead run checks and other processes in the original repository, pull requests are filed automatically to any downstream repositories made from this template. 4.0.8 How to enroll a repository to receive template updates To enroll in these automatic update PRs, the new course’s repository name will need to be added to this file in the original template Use this link to edit the file. Add your repository’s name where it says #NEW REPO HERE#, being careful to indent the same amount as the other repositories listed. Choose Create a new branch for this commit and start a pull request. Name the branch what you like. Name the commit Add new repository to sync Click Propose changes. Write a short pull request description describing that you are adding a new repository to the sync.yml file. Click Create Pull Request Request @cansavvy as a reviewer. If the your new course doesn’t need some of the functionality of these files or you find the automatic bothersome, you can feel free to use this guide to tailor which files you want updates for. If you have any questions about the implications of any of these updates or files, please tag @cansavvy. 4.0.9 How to tailor incoming sync changes: Upon a new release, a pull request is automatically filed to any repositories that are added to the sync.yml file. Carefully review the latest release notes and the Files changed tab of the sync PR. And again, tag @cansavvy with any questions. It might be that you want some of the changes from the PR but not all of them. Each file that is updated in a sync PR is updated in its own commit. If you don’t want the changes from a particular file, you can always revert that particular commit before merging the sync PR. If you will not want any updates on this file in the future, you may want to remove a file from being synced in your repo by reconfiguring the sync file. If you want only some changes, but they are not on a whole file basis, you could check out the branch and make manual edits. To checkout the branch, navigate to your own repository you should be able to run: git checkout repo-sync/OTTR_Template/default If you don’t want any of the changes you can close the PR entirely. You may want to unenroll your repository from the sync github actions by deleting your repo name from this file if this will continue to be the case. "],["finishing-touches.html", "Chapter 5 Finishing touches 5.1 Set up feedback method 5.2 Customizing the Style 5.3 Creating your own style 5.4 Adding sections that aren’t numbered 5.5 Changing course text colors 5.6 Modifying the image at the top of the course", " Chapter 5 Finishing touches 5.1 Set up feedback method Before you release your course to the public, you will want to set up a method to allow users to give you feedback about the course. This is useful so users can allow you to know if anything is broken or if they have an idea for improvements! We will explain one way of adding a feedback method to your course, but depending on your course’s needs and set up you may want to adjust to it or add to it. 5.1.1 Step 1) Decide on a method of feedback for your users to use. Here’s some ideas: - Link the to the GitHub issues (you may want to use an issue template to help users structure their ideas). - Link to a Google form that you’ll monitor. Here’s a template Google form you can make a copy of to get started. 5.1.2 Step 2) Add feedback button Add the line below to the last part of your _output.yml file but fill in the method of feedback URL from Step 1 where it says{FEEDBACK-URL-HERE} including removing the {}: &lt;p style=&quot;padding-left: 40px;&quot;&gt;&lt;div class=&quot;trapezoid&quot; style = &quot;padding-left: 40px;&quot;&gt;&lt;span&gt; &lt;a href=&quot;{FEEDBACK-URL-HERE}&quot;&gt; Click here to provide feedback&lt;/a&gt; &lt;img src=&quot;assets/itcr_arrow.png&quot; style=&quot; width: 10%&quot; &gt;&lt;/span&gt;&lt;/div&gt;&lt;/p&gt; 5.1.3 Step 3) Add your updated _output.yml to a pull request. Check the preview link and make sure it’s what you want. Add to the main branch when you and your team have deemed it is ready. *For more ideas and discussion on obtaining user feedback see this course chapter. 5.1.4 Changing title The title is specified on the index.Rmd page in the yml header. Modify the yaml header to change the title for your course. --- title: &quot;Title of Course&quot; --- Note that if one of the chapter Rmd files has a title in the yml that comes first alphabetically, it will be shown as the title of the course. Hence avoid having yml header titles for the chapter files. 5.2 Customizing the Style There are styles/brandings that are available in our library of style sets. However, there are also instructions to customize your own course style following these instructions in the next section. 5.2.1 Using a style set By default this course template will use the jhudsl data science lab style. However, you can switch this to another style set by moving some files. Take a look at the style-sets for the other styles available. For example, if you are creating an ITCR course, you will need the files in style-sets/itcr or if you are making a DataTrail course, the files in style-sets/data-trail. For these instructions,let’s refer to data-trail or itcr as the &lt;set-name&gt;. On a new branch, copy the style-sets/&lt;set-name&gt;/index.Rmd and style-sets/&lt;set-name&gt;/_output.yml to the top of the repository to overwrite the default index.Rmd and _output.yml. Copy over all the files in the style-sets/&lt;set-name&gt;/copy-to-assets to the assets folder in the top of the repository. Create a pull request with these changes, and double check the rendered preview to make sure that the style is what you are looking for. 5.3 Creating your own style Here are the instructions to change the aesthetic aspects about your course if you wish to create a new style for your course. 5.3.1 Changing the favicon Favicons are small icons that appear on your browser tab. To change the favicon, first take the image you would like to use to this website to convert it into a favicon. Then save this file in the assets/ directory. On the index.Rmd file, make sure that the correct favicon is referenced to in the yaml header, so that the correct favicon will be used. Here you can see that by default the Data Science Lab (dasl) favicon will be used. --- title: &quot;Course Name &quot; date: &quot;December, 2021&quot; site: bookdown::bookdown_site documentclass: book bibliography: [book.bib, packages.bib] biblio-style: apalike link-citations: yes description: &quot;Description about Course/Book.&quot; favicon: assets/dasl_favicon.ico --- If you are making an ITN course, then the favicon is already set up n the index-itcr.Rmd file. Just delete the existing index.Rmd file and rename the index-itcr.Rmd file to be index.Rmd. This is already part of the set up instructions. 5.3.2 Adding logos Logos for the table of contents are added with the _output.yml file. This adds an image above the table of contents when the content is rendered with bookdown. If you are creating a general DaSL course: - Please replace the URL in the line 13 of code for the _output.yml file with the URL for the GitHub repo for your course. This will allow people to more easily find how out how you created your course. Otherwise, they will be directed to this template. If you are creating a DaSL course for a project other than ITN: - Delete the _output.yml file and rename the _output-itcr.yml to be _output.yml. - Please modify the lines that link to the http://jhudatascience.org/ with your own website and logo if you are not part of the jhuDaSL . - Please replace the URL in the line 13 of code with the URL for the GitHub repo for your course. This will allow people to more easily find how out how you created your course. Otherwise, they will be directed to this template. - If you wish to create a different color scheme, the font colors can also be modified along with other aspects in the assets/style.css file. Take a look at the assets/style_ITN.css file to see what was changed for that color scheme from the assets/style.css file. - You can replace the logo with the appropriate project logo by replacing https://www.itcrtraining.org/ with the project website link and \"https://raw.githubusercontent.com/jhudsl/OTTR_Template/main/https://raw.githubusercontent.com/jhudsl/OTTR_Template/main/resources/images/logo.png\" for the project logo image link in line 11. 5.4 Adding sections that aren’t numbered You may notice that currently the References page and about pages are not numbered like the other chapters. If you want additional sections like this add an Rmd file and type the name of the page after a single hashtag # followed by this: {-}. This will exclude this page from being numbered. Thus as example the reference page looks like this: # References {-} 5.5 Changing course text colors To modify the colors used for the text, take a look at the assets/style.css code. If you would like to change the current dark blue color to be a different color, search and replace for #012d72. You can find hex color codes at this website to use as a replacement. If you would like to change the current light blue color to be a different color, do the same but search for #68ace5. 5.6 Modifying the image at the top of the course If you would like to change the image at the top of the Bookdown version of the course, you need to do the following steps: * Add a new image file to the assets directory * Modify the assets/big-image.html file on line 11. Change out src = \"assets/dasl_thin_main_image.png\" so that dasl_thin_main_image.png is replaced with the name of your image file. Since so many individuals contribute to our courses in so many ways. Thus, we decided to make a table of credits to make it clear who did what. Here is an example: Credit section from a course that used this template Please see the about section of the template for descriptions of how credits should be attributed for the course. This is generated from the About.Rmd file. An About.Rmd file will already be in your course from using our template. You will need to do the following steps to update it for your course: Fill out author names for the various roles where applicable. Delete lines for roles that are not applicable. Make sure roles grammatically match names. If there are multiple people include the “s” in the role name where applicable and remove the parentheses. If only one person is appropriate for a given role remove “(s)” from the role name. Ensure that each row has “|” around each cell value. Example Table: The first row and additional rows based on this table should be added and filled in using markdown table format. |Credits|Names| |-------|-----| |Lead Content Instructor|FirstName LastName| Links to personal websites can be added below the table to make it easier to read. |Credits|Names| |-------|-----| |Lead Content Instructor|[FirstName LastName]| &lt;!-- Author information --&gt; [FirstName LastName]: link to personal website These rows should be included for all courses: |Template Publishing Engineers|[Candace Savonen], [Carrie Wright]| |Publishing Maintenance Engineer|[Candace Savonen]| |Technical Publishing Stylists|[Carrie Wright], [Candace Savonen]| |Package Developers[Leanbuild]|[John Muschelli], [Candace Savonen], [Carrie Wright]| &lt;!-- Author information --&gt; [John Muschelli]: https://johnmuschelli.com/ [Candace Savonen]: https://www.cansavvy.com/ [Carrie Wright]: https://carriewright11.github.io/ &lt;!-- Links --&gt; [Leanbuild]: https://github.com/jhudsl/leanbuild These rows should be added to all Johns Hopkins courses: |Content Publisher|[Ira Gooding]| |Content Publishing Reviewer|Ira Gooding]| &lt;!-- Author information --&gt; [Ira Gooding]: https://publichealth.jhu.edu/faculty/4130/ira-gooding Additionally, this row should be added for all ITCR Courses: |Content Directors|[Jeff Leek], [Sarah Wheelan]| &lt;!-- Author information --&gt; [Jeff Leek]: https://jtleek.com/ [Sarah Wheelan]: https://www.hopkinsmedicine.org/profiles/details/sarah-wheelan 5.6.1 Adding the Credits table to Coursera In Coursera, you can add the credits table URL as an ungraded plugin (the same as described here for adding chapter content). This should be added at the beginning of your course, right after the introduction. 5.6.2 Adding the Credits table to Leanpub In Leanpub, make sure that your About.md file in your manuscript folder is listed in your Book.txt file and this Credits table will automatically be incorporated into your Leanpub course. If you would like to add Google Analytics to track traffic to your course, you can do the following: Get a Google Analytics account (if you do not already have one): https://analytics.google.com/analytics Google Analytics account setup Note that in creating an account you will need to agree to some terms. Currently it is free to get Google analytics data as long as your course does not exceed a very high user rate. Check to make sure that the terms work for you Google Analytics terms If you already have an account or navigated away from where you started - Go to the Admin tab (lower left button that looks like a gear) Set up a new property (fill out name and details, select options about tracking traffic for how you intend to use Google Analytics) Google Analytics Property creation Google Analytics Property Google Analytics Property choices Add a stream to your property, choose the Web option. Google Analytics stream options Fill in your stream information with the link for your course (note you may need to remove https as this is part of a pull down menu to the left of where you paste your link) Google Analytics stream Google Analytics stream On the resulting page you will see a Measurement ID. Copy this ID and paste it in the GA_Script.Rhtml file in the template replacing the fields that say {MeasurementID} including the curly brackets. Modify the _output.yml file so that the line that starts with before body: is changed to include brackets around the GA_script.Rhtml file before a comma and the name of the hero image html file (which should already be listed). For example, like this: before_body: [GA_Script.Rhtml, assets/big-image-itcr.html] or this: before_body: [GA_Script.Rhtml, assets/big-image.html] Rerender your course by making a change to one of your chapter RMD files in a pull request and pushing and merging the pull request. This will cause new html files to be made for each chapter in the docs folder. The Google Analytics code should now be in each of the html files - you can check by searching for Google Analytics. Go back to Google Analytics and log in if you need to. Check on the Reports button on the top of the far left icon menu. The icon looks like a bar chart. If you open up a browser window to your hosted course online, then you should see yourself as 1 user in the last 30 minutes. Google Analytics Reports Check Google Analytics Enjoy the data about how people are using your course! Congrats, you are most of the way toward publishing your course! At this point, it is a good idea to create a release! (It’s a good idea to set up Google Analytics before completing this step) For jhudsl courses your release tag signifies your course’s readiness for public viewing (and whether or not it will be added to the public version of the JHU course library. 5.6.3 Release coding Releases that are 1.0 or greater are considered ready for public viewing. Releases less than 1.0 will be considered “on deck”. They will be advertised to learners as nearly ready, but will have a warning that lets them know the course is still actively under development. No release tags means the course is not ready for public listing or viewing at this time. "],["about-the-authors.html", "About the Authors", " About the Authors These credits are based on our course contributors table guidelines.     Credits Names Pedagogy Lead Content Instructor(s) FirstName LastName Lecturer(s) (include chapter name/link in parentheses if only for specific chapters) - make new line if more than one chapter involved Delivered the course in some way - video or audio Content Author(s) (include chapter name/link in parentheses if only for specific chapters) - make new line if more than one chapter involved If any other authors besides lead instructor Content Contributor(s) (include section name/link in parentheses) - make new line if more than one section involved Wrote less than a chapter Content Editor(s)/Reviewer(s) Checked your content Content Director(s) Helped guide the content direction Content Consultants (include chapter name/link in parentheses or word “General”) - make new line if more than one chapter involved Gave high level advice on content Acknowledgments Gave small assistance to content but not to the level of consulting Production Content Publisher(s) Helped with publishing platform Content Publishing Reviewer(s) Reviewed overall content and aesthetics on publishing platform Technical Course Publishing Engineer(s) Helped with the code for the technical aspects related to the specific course generation Template Publishing Engineers Candace Savonen, Carrie Wright Publishing Maintenance Engineer Candace Savonen Technical Publishing Stylists Carrie Wright, Candace Savonen Package Developers (Leanbuild) John Muschelli, Candace Savonen, Carrie Wright Art and Design Illustrator(s) Created graphics for the course Figure Artist(s) Created figures/plots for course Videographer(s) Filmed videos Videography Editor(s) Edited film Audiographer(s) Recorded audio Audiography Editor(s) Edited audio recordings Funding Funder(s) Institution/individual who funded course including grant number Funding Staff Staff members who help with funding   ## ─ Session info ─────────────────────────────────────────────────────────────── ## setting value ## version R version 4.0.2 (2020-06-22) ## os Ubuntu 20.04.3 LTS ## system x86_64, linux-gnu ## ui X11 ## language (EN) ## collate en_US.UTF-8 ## ctype en_US.UTF-8 ## tz Etc/UTC ## date 2021-12-20 ## ## ─ Packages ─────────────────────────────────────────────────────────────────── ## package * version date lib source ## assertthat 0.2.1 2019-03-21 [1] RSPM (R 4.0.3) ## backports 1.1.10 2020-09-15 [1] RSPM (R 4.0.2) ## bookdown 0.24 2021-12-20 [1] Github (rstudio/bookdown@88bc4ea) ## callr 3.4.4 2020-09-07 [1] RSPM (R 4.0.2) ## cli 2.0.2 2020-02-28 [1] RSPM (R 4.0.0) ## crayon 1.3.4 2017-09-16 [1] RSPM (R 4.0.0) ## desc 1.2.0 2018-05-01 [1] RSPM (R 4.0.3) ## devtools 2.3.2 2020-09-18 [1] RSPM (R 4.0.3) ## digest 0.6.25 2020-02-23 [1] RSPM (R 4.0.0) ## ellipsis 0.3.1 2020-05-15 [1] RSPM (R 4.0.3) ## evaluate 0.14 2019-05-28 [1] RSPM (R 4.0.3) ## fansi 0.4.1 2020-01-08 [1] RSPM (R 4.0.0) ## fs 1.5.0 2020-07-31 [1] RSPM (R 4.0.3) ## glue 1.6.0 2021-12-17 [1] CRAN (R 4.0.2) ## htmltools 0.5.0 2020-06-16 [1] RSPM (R 4.0.1) ## jquerylib 0.1.1 2020-04-30 [1] RSPM (R 4.0.0) ## knitr 1.33 2021-12-20 [1] Github (yihui/knitr@a1052d1) ## lifecycle 1.0.0 2021-02-15 [1] CRAN (R 4.0.2) ## magrittr 1.5 2014-11-22 [1] RSPM (R 4.0.0) ## memoise 1.1.0 2017-04-21 [1] RSPM (R 4.0.0) ## pkgbuild 1.1.0 2020-07-13 [1] RSPM (R 4.0.2) ## pkgload 1.1.0 2020-05-29 [1] RSPM (R 4.0.3) ## prettyunits 1.1.1 2020-01-24 [1] RSPM (R 4.0.3) ## processx 3.4.4 2020-09-03 [1] RSPM (R 4.0.2) ## ps 1.3.4 2020-08-11 [1] RSPM (R 4.0.2) ## purrr 0.3.4 2020-04-17 [1] RSPM (R 4.0.3) ## R6 2.4.1 2019-11-12 [1] RSPM (R 4.0.0) ## remotes 2.2.0 2020-07-21 [1] RSPM (R 4.0.3) ## rlang 0.4.10 2021-12-20 [1] Github (r-lib/rlang@f0c9be5) ## rmarkdown 2.10 2021-12-20 [1] Github (rstudio/rmarkdown@02d3c25) ## rprojroot 1.3-2 2018-01-03 [1] RSPM (R 4.0.0) ## sessioninfo 1.1.1 2018-11-05 [1] RSPM (R 4.0.3) ## stringi 1.5.3 2020-09-09 [1] RSPM (R 4.0.3) ## stringr 1.4.0 2019-02-10 [1] RSPM (R 4.0.3) ## testthat 3.0.1 2021-12-20 [1] Github (R-lib/testthat@e99155a) ## usethis 2.1.5.9000 2021-12-20 [1] Github (r-lib/usethis@6c2e204) ## withr 2.3.0 2020-09-22 [1] RSPM (R 4.0.2) ## xfun 0.26 2021-12-20 [1] Github (yihui/xfun@74c2a66) ## yaml 2.2.1 2020-02-01 [1] RSPM (R 4.0.3) ## ## [1] /usr/local/lib/R/site-library ## [2] /usr/local/lib/R/library "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
